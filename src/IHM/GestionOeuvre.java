/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package IHM;

import Utility.BibalExceptions;
import Utility.DBConnection;
import Utility.ModelTableau;
import static Utility.Utility.closeStatementResultSet;
import static Utility.Utility.initialiseRequetePreparee;
import control.UsagerControl;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import objets_metiers.Usager;

/**
 *
 * @author SIMO
 */
public class GestionOeuvre extends javax.swing.JFrame implements MouseListener {

    /**
     * Creates new form GestionUsager
     */
    public GestionOeuvre() {

        initComponents();
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        //this.setLocation(dim.width / 2 - this.getSize().width / 2, dim.height / 2 - this.getSize().height / 2);
        setResizable(false);
        setIdentifiant();

        tableListeUsager.addMouseListener(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        panRecherch = new javax.swing.JPanel();
        RecherchParLabel = new javax.swing.JLabel();
        RecherchField = new javax.swing.JFormattedTextField();
        RecherchCombo = new javax.swing.JComboBox();
        RecherchBouton = new javax.swing.JButton();
        panListeUsager = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableListeUsager = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        retourButton = new javax.swing.JButton();
        modifierBouton = new javax.swing.JButton();
        ajouterBouton = new javax.swing.JButton();
        supprimerButton = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Gestion des oeuvres et des Exemplaires");
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setName("Gestion personnel"); // NOI18N
        jPanel1.setPreferredSize(new java.awt.Dimension(1162, 608));
        jPanel1.setRequestFocusEnabled(false);

        panRecherch.setBackground(new java.awt.Color(255, 255, 255));
        panRecherch.setBorder(javax.swing.BorderFactory.createTitledBorder("Rechercher"));

        RecherchParLabel.setText("Rechercher par  ");

        RecherchField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        RecherchField.setPreferredSize(new java.awt.Dimension(130, 26));

        RecherchCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Identifiant", "Nom", "Tout afficher" }));
        RecherchCombo.setPreferredSize(new java.awt.Dimension(123, 26));
        RecherchCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RecherchComboActionPerformed(evt);
            }
        });

        RecherchBouton.setText("Rechercher");
        RecherchBouton.setPreferredSize(new java.awt.Dimension(47, 26));
        RecherchBouton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RecherchBoutonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panRecherchLayout = new javax.swing.GroupLayout(panRecherch);
        panRecherch.setLayout(panRecherchLayout);
        panRecherchLayout.setHorizontalGroup(
            panRecherchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panRecherchLayout.createSequentialGroup()
                .addGap(118, 118, 118)
                .addGroup(panRecherchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panRecherchLayout.createSequentialGroup()
                        .addComponent(RecherchField, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(RecherchBouton, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panRecherchLayout.createSequentialGroup()
                        .addComponent(RecherchParLabel)
                        .addGap(41, 41, 41)
                        .addComponent(RecherchCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(86, Short.MAX_VALUE))
        );
        panRecherchLayout.setVerticalGroup(
            panRecherchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panRecherchLayout.createSequentialGroup()
                .addGroup(panRecherchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RecherchParLabel)
                    .addComponent(RecherchCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addGroup(panRecherchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RecherchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(RecherchBouton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        panListeUsager.setBackground(new java.awt.Color(255, 255, 255));
        panListeUsager.setBorder(javax.swing.BorderFactory.createTitledBorder("Liste des Oeuvres"));

        jScrollPane1.getViewport().setBackground(Color.white);
        jScrollPane1.setBackground(new java.awt.Color(255, 255, 255));

        tableListeUsager.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Titre", "Auteur", "Catégorie", "Type", "Exemplaires", "Réservations"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableListeUsager.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tableListeUsager.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tableListeUsager);
        if (tableListeUsager.getColumnModel().getColumnCount() > 0) {
            tableListeUsager.getColumnModel().getColumn(0).setPreferredWidth(40);
            tableListeUsager.getColumnModel().getColumn(5).setPreferredWidth(50);
        }

        javax.swing.GroupLayout panListeUsagerLayout = new javax.swing.GroupLayout(panListeUsager);
        panListeUsager.setLayout(panListeUsagerLayout);
        panListeUsagerLayout.setHorizontalGroup(
            panListeUsagerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panListeUsagerLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jScrollPane1)
                .addGap(0, 0, 0))
        );
        panListeUsagerLayout.setVerticalGroup(
            panListeUsagerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        retourButton.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        retourButton.setText("Retour");
        retourButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                retourButtonActionPerformed(evt);
            }
        });

        modifierBouton.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        modifierBouton.setText("Modifier");
        modifierBouton.setEnabled(false);
        modifierBouton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modifierBoutonActionPerformed(evt);
            }
        });

        ajouterBouton.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        ajouterBouton.setText("Ajouter");
        ajouterBouton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ajouterBoutonActionPerformed(evt);
            }
        });

        supprimerButton.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        supprimerButton.setText("Exemplaire");
        supprimerButton.setEnabled(false);

        jButton2.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jButton2.setText("Supprimer");
        jButton2.setEnabled(false);

        jButton1.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jButton1.setText("Afficher");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(supprimerButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(retourButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(modifierBouton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ajouterBouton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(40, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ajouterBouton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 58, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(43, 43, 43)
                .addComponent(modifierBouton)
                .addGap(47, 47, 47)
                .addComponent(jButton2)
                .addGap(45, 45, 45)
                .addComponent(supprimerButton)
                .addGap(45, 45, 45)
                .addComponent(retourButton)
                .addGap(28, 28, 28))
        );

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        jLabel1.setText("Gestion des Oeuvres et des Exemplaires");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(panRecherch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(panListeUsager, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(79, 79, 79)
                        .addComponent(jLabel1)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(28, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(36, 36, 36)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(panRecherch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(panListeUsager, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 821, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 585, Short.MAX_VALUE)
        );

        setSize(new java.awt.Dimension(837, 624));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void retourButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_retourButtonActionPerformed
        Menu m = new Menu();
        this.dispose();
        m.setVisible(true);
    }//GEN-LAST:event_retourButtonActionPerformed

    private void RecherchBoutonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RecherchBoutonActionPerformed
        String rechPar = RecherchCombo.getSelectedItem().toString();
        String textARechercher = RecherchField.getText().trim();
        if (textARechercher.length() > 0) {
            ArrayList<Usager> listUsagers = new ArrayList<>();
            try {
                switch (rechPar) {
                    case "Identifiant":
                        int identifiant = Integer.parseInt(textARechercher);
                        Usager usager = UsagerControl.findById(identifiant);
                        listUsagers.add(usager);
                        fillUsagerJtable(listUsagers);
                        break;
                    case "Nom":
                        listUsagers = UsagerControl.findByNom(textARechercher);
                        fillUsagerJtable(listUsagers);
                        break;
                    case "Tout afficher":
                        listUsagers = UsagerControl.getListUsagers();
                        fillUsagerJtable(listUsagers);
                        break;
                }
            } catch (BibalExceptions e) {
                System.out.println("IHM.GestionUsager.RecherchBoutonActionPerformed() : Erreurs");
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Identifiant non valide", "Informations", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }//GEN-LAST:event_RecherchBoutonActionPerformed

    private void RecherchComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RecherchComboActionPerformed

        if (RecherchCombo.getSelectedItem().equals("Tout afficher")) {
            try {
                ArrayList<Usager> listUsagers = UsagerControl.getListUsagers();
                fillUsagerJtable(listUsagers);
                RecherchBouton.setEnabled(false);
            } catch (BibalExceptions e) {
                System.out.println("IHM.GestionUsager.RecherchComboActionPerformed() : Erreurs");
            }
        } else {
            RecherchBouton.setEnabled(true);
        }
    }//GEN-LAST:event_RecherchComboActionPerformed

    private void ajouterBoutonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ajouterBoutonActionPerformed

        AjoutOeuvre ajoutOeuvre = new AjoutOeuvre(this, true);
        ajoutOeuvre.setLocationRelativeTo(null);
        ajoutOeuvre.setVisible(true);

        //tester le bouton sur lequel on a appuyé puis rafraichir la jtable
//        try {
//            String nom = nomField.getText();
//            String prenom = prenomField.getText();
//            Date dateNais = dateNaisPicker.getDate();
//            String sexe = civiliteCombo.getSelectedItem().toString().equals("M") ? "Masculin" : "Féminin";
//            String adresse = adresseField.getText();
//            String tel = telField.getText().replace("-", "").trim();
//            UsagerControl.ajouter(new Usager(nom, prenom, dateNais, sexe, adresse, tel));
//            JOptionPane.showMessageDialog(null, "Usager ajouté avec succès", "Informations", JOptionPane.INFORMATION_MESSAGE);
//            setIdentifiant();
//            clearField();
//            String titre[] = new String[]{"Identifiant", "Nom",
//                "Prénom", "Date de naissance", "Sexe", "Téléphone", "Adresse"};
//            final String REQUETE = "SELECT id, nom, prenom, dateNais, sexe, tel, adresse"
//            + " FROM usager ORDER BY id DESC LIMIT 10";
//            fillListeUsager(REQUETE, new Object[0], titre);
//
//        } catch (BibalExceptions ex) {
//            ex.printStackTrace();
//        }
    }//GEN-LAST:event_ajouterBoutonActionPerformed

    private void modifierBoutonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modifierBoutonActionPerformed
//        try {
//            int identifiant = Integer.parseInt(identifiantField.getText());
//            String nom = nomField.getText();
//            String prenom = prenomField.getText();
//            Date dateNais = dateNaisPicker.getDate();
//            String sexe = civiliteCombo.getSelectedItem().toString().equals("M") ? "Masculin" : "Féminin";
//            String adresse = adresseField.getText();
//            String tel = telField.getText().replace("-", "").trim();
//            UsagerControl.modifier(new Usager(identifiant, nom, prenom, dateNais, sexe, adresse, tel));
//            JOptionPane.showMessageDialog(null, "Les modifications ont été enregistrées", "Informations", JOptionPane.INFORMATION_MESSAGE);
//            setIdentifiant();
//            clearField();
//            String titre[] = new String[]{"Identifiant", "Nom",
//                "Prénom", "Date de naissance", "Sexe", "Téléphone", "Adresse"};
//            final String REQUETE = "SELECT id, nom, prenom, dateNais, sexe, tel, adresse"
//            + " FROM usager ORDER BY id DESC LIMIT 10";
//            fillListeUsager(REQUETE, new Object[0], titre);
//
//            modifierBouton.setEnabled(false);
//            supprimerButton.setEnabled(false);
//            ajouterBouton.setEnabled(true);
//        } catch (BibalExceptions ex) {
//            ex.printStackTrace();
//        }
    }//GEN-LAST:event_modifierBoutonActionPerformed

    private void fillUsagerJtable(ArrayList<Usager> listUsagers) {
        String titre[] = new String[]{"Identifiant", "Nom",
            "Prénom", "Date de naissance", "Sexe", "Téléphone", "Adresse"};
        if (null != listUsagers) {
            Object data[][] = new Object[listUsagers.size()][titre.length];
            int nbLigne = listUsagers.size();
            for (int i = 0; i < nbLigne; i++) {
                Usager usager = listUsagers.get(i);
                data[i][0] = usager.getId();
                data[i][1] = usager.getNom();
                data[i][2] = usager.getPrenom();
                data[i][3] = usager.getDateNais();
                data[i][4] = usager.getSexe();
                data[i][5] = usager.getTel();
                data[i][6] = usager.getAdresse();
            }
            ModelTableau model = new ModelTableau(data, titre);
            tableListeUsager.setModel(model);
            tableListeUsager.setRowHeight(30);
        } else {
            //afficher tableau vide
            Object data[][] = new Object[listUsagers.size()][titre.length];
            ModelTableau model = new ModelTableau(data, titre);
            tableListeUsager.setModel(model);
            tableListeUsager.setRowHeight(1);
        }
    }

    private void fillListeUsager(String sql, Object param[], String titre[]) {
        Object data[][];
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        try {
            preparedStatement = initialiseRequetePreparee(DBConnection.getConnection(),
                    sql, param);
            resultSet = preparedStatement.executeQuery();
            ResultSetMetaData resultMeta = resultSet.getMetaData();
            int nbreColumn = resultMeta.getColumnCount();

//            Pour récupérer le nombre total de ligne on se place sur la
//            dernière puis on revient avant la première pour parcourir
            resultSet.last();
            int nbreRow = resultSet.getRow();
            resultSet.beforeFirst();
            data = new Object[nbreRow][nbreColumn];

            int nbreLine = 0;
            while (resultSet.next()) {
                for (int i = 1; i <= resultMeta.getColumnCount(); i++) {
                    data[nbreLine][i - 1] = resultSet.getObject(i);
                }
                nbreLine++;
            }

            if (nbreLine != 0) {
                ModelTableau model = new ModelTableau(data, titre);
                tableListeUsager.setModel(model);
                tableListeUsager.setRowHeight(30);
            } else {
                //afficher tableau vide
                data = new Object[1][titre.length];
                ModelTableau model = new ModelTableau(data, titre);
                tableListeUsager.setModel(model);
                tableListeUsager.setRowHeight(1);
            }

        } catch (SQLException e) {
            System.out.println("IHM.GestionUsager.fillListeUsager()");
        } catch (BibalExceptions e) {
            System.out.println("IHM.GestionUsager.fillListeUsager()");
        } finally {
            closeStatementResultSet(preparedStatement, resultSet);
        }
    }

    private void clearField() {
//        nomField.setText("");
//        prenomField.setText("");
//        adresseField.setText("");
//        telField.setText("");
    }

    private void setIdentifiant() {
//        PreparedStatement preparedStatement = null;
//        ResultSet resultSet = null;
//        try {
//            final String SQL_SELECT_ID = "SELECT id FROM usager ORDER BY id DESC LIMIT 1";
//            preparedStatement = initialiseRequetePreparee(DBConnection.getConnection(),
//                    SQL_SELECT_ID, new Object[0]);
//            resultSet = preparedStatement.executeQuery();
//            int identifiant = 1;
//            if (resultSet.first()) {
//                identifiant = resultSet.getInt("id");
//            }
//            identifiantField.setText((identifiant + 1) + "");
//        } catch (SQLException | BibalExceptions e) {
//            JOptionPane.showMessageDialog(null, "Erreurs d'accès à la base de données",
//                    "Erreurs", JOptionPane.ERROR_MESSAGE);
//        } finally {
//            closeStatementResultSet(preparedStatement, resultSet);
//        }
    }

    @Override
    public void mouseClicked(MouseEvent e) {
    }

    @Override
    public void mousePressed(MouseEvent e) {
    }

    @Override
    public void mouseReleased(MouseEvent e) {
//        int row = tableListeUsager.getSelectedRow();
//        int nbreCol = tableListeUsager.getColumnCount();
//
//        Object dataLigneSelected[] = new Object[nbreCol];
//        if (row >= 0) {
//            for (int i = 0; i < nbreCol; i++) {
//                dataLigneSelected[i] = tableListeUsager.getModel().getValueAt(row, i);
//            }
//            identifiantField.setText(dataLigneSelected[0].toString());
//            nomField.setText(dataLigneSelected[1].toString());
//            prenomField.setText(dataLigneSelected[2].toString());
//            try {
//                dateNaisPicker.setDate(formatDate(YMDtoDMY(dataLigneSelected[3].toString(), "/")));
//            } catch (BibalExceptions ex) {
//                ex.printStackTrace();
//            }
//            String sexe = dataLigneSelected[4].toString();
//            String civilite = sexe.equalsIgnoreCase("Masculin") ? "M" : "Mme";
//            civiliteCombo.setSelectedItem(civilite);
//            telField.setText(dataLigneSelected[5].toString());
//            adresseField.setText(dataLigneSelected[6].toString());
//            modifierBouton.setEnabled(true);
//            supprimerButton.setEnabled(true);
//            ajouterBouton.setEnabled(false);
//        }
    }

    @Override
    public void mouseEntered(MouseEvent e) {
    }

    @Override
    public void mouseExited(MouseEvent e) {
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Metal".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GestionOeuvre.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GestionOeuvre.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GestionOeuvre.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GestionOeuvre.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GestionOeuvre().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton RecherchBouton;
    private javax.swing.JComboBox RecherchCombo;
    private javax.swing.JFormattedTextField RecherchField;
    private javax.swing.JLabel RecherchParLabel;
    private javax.swing.JButton ajouterBouton;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton modifierBouton;
    private javax.swing.JPanel panListeUsager;
    private javax.swing.JPanel panRecherch;
    private javax.swing.JButton retourButton;
    private javax.swing.JButton supprimerButton;
    private javax.swing.JTable tableListeUsager;
    // End of variables declaration//GEN-END:variables
}
